---
http_interactions:
- request:
    method: get
    uri: https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: MOVED PERMANENTLY
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '415'
      Location:
      - https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/
      Pragma:
      - public
      Cache-Control:
      - public
    body:
      encoding: UTF-8
      string: |-
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
        <title>Redirecting...</title>
        <h1>Redirecting...</h1>
        <p>You should be redirected automatically to target URL: <a href="https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/">https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/</a>.  If not click the link.
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:25 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Cookie
      Set-Cookie:
      - session=d1~eyJjc3JmX3Rva2VuIjoiOWE5M2E1NmE2NGE5ODFiN2Y5NTRiMmIxMTU2NzRiYjUzYzQwMzVjZSJ9.XuIIsQ.uPPD-7dtxcBT11RL062O6phj1gA;
        Domain=.www.data.gouv.fr; HttpOnly; Path=/
      Pragma:
      - public
      Cache-Control:
      - public
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: MOVED PERMANENTLY
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '415'
      Location:
      - https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/
      Pragma:
      - public
      Cache-Control:
      - public
    body:
      encoding: UTF-8
      string: |-
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
        <title>Redirecting...</title>
        <h1>Redirecting...</h1>
        <p>You should be redirected automatically to target URL: <a href="https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/">https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/</a>.  If not click the link.
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Cookie
      Set-Cookie:
      - session=d1~eyJjc3JmX3Rva2VuIjoiOTQ2YzQzNWY1Njk4ODAxYTNiN2JhYjgzZDI2YmU0NmYwMzcyMjc4ZSJ9.XuIIsg.JNJlAy1JHOWcqxDxtbMVLb3rZwY;
        Domain=.www.data.gouv.fr; HttpOnly; Path=/
      Pragma:
      - public
      Cache-Control:
      - public
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: head
    uri: https://files.data.gouv.fr/insee-sirene/StockUniteLegale_utf8.zip
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - files.data.gouv.fr
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:26 GMT
      Content-Type:
      - application/zip
      Content-Length:
      - '678070217'
      Last-Modified:
      - Mon, 01 Jun 2020 04:06:57 GMT
      Connection:
      - keep-alive
      Etag:
      - '"5ed47ee1-286a87c9"'
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
      Accept-Ranges:
      - bytes
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: MOVED PERMANENTLY
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '415'
      Location:
      - https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/
      Pragma:
      - public
      Cache-Control:
      - public
    body:
      encoding: UTF-8
      string: |-
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
        <title>Redirecting...</title>
        <h1>Redirecting...</h1>
        <p>You should be redirected automatically to target URL: <a href="https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/">https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/</a>.  If not click the link.
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Cookie
      Set-Cookie:
      - session=d1~eyJjc3JmX3Rva2VuIjoiN2VmYWIxNTM3ZTc1YmQ0NmMzNjU0ODExOGIxY2FjYWJhYTg1NmQ0YyJ9.XuIIsg.1O7R05eNt-sGPqL02AZjE850lVU;
        Domain=.www.data.gouv.fr; HttpOnly; Path=/
      Pragma:
      - public
      Cache-Control:
      - public
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: MOVED PERMANENTLY
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Content-Length:
      - '415'
      Location:
      - https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/
      Pragma:
      - public
      Cache-Control:
      - public
    body:
      encoding: UTF-8
      string: |-
        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
        <title>Redirecting...</title>
        <h1>Redirecting...</h1>
        <p>You should be redirected automatically to target URL: <a href="https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/">https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/</a>.  If not click the link.
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://www.data.gouv.fr/fr/datasets/base-sirene-des-entreprises-et-de-leurs-etablissements-siren-siret/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Thu, 11 Jun 2020 10:34:26 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Vary:
      - Accept-Encoding
      - Cookie
      Set-Cookie:
      - session=d3~eyJjc3JmX3Rva2VuIjoiYmJiMzU3ZTgwYWFkNDE1YzZlODlmOGNjOTdmYTQzNjQzYzQ1MDNkZiJ9.XuIIsg.6CG8mmGXcMTaZrvQXkE52FAJ2Ok;
        Domain=.www.data.gouv.fr; HttpOnly; Path=/
      Pragma:
      - public
      Cache-Control:
      - public
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://files.data.gouv.fr/geo-sirene
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Server:
      - nginx
      Date:
      - Tue, 07 Jul 2020 14:43:04 GMT
      Content-Type:
      - text/html
      Content-Length:
      - '178'
      Location:
      - https://files.data.gouv.fr/geo-sirene/
      Connection:
      - keep-alive
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
    body:
      encoding: UTF-8
      string: "<html>\r\n<head><title>301 Moved Permanently</title></head>\r\n<body
        bgcolor=\"white\">\r\n<center><h1>301 Moved Permanently</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n"
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://files.data.gouv.fr/geo-sirene/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 07 Jul 2020 14:43:10 GMT
      Content-Type:
      - text/html
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
    body:
      encoding: ASCII-8BIT
      string: "<html>\r\n<head><title>Index of /geo-sirene/</title></head>\r\n<body
        bgcolor=\"white\">\r\n<h1>Index of /geo-sirene/</h1><hr><pre><a href=\"../\">../</a>\r\n<a
        href=\"2020-07/\">2020-07/</a>                                           02-Jul-2020
        09:24                   -\r\n<a href=\"last/\">last/</a>                                              02-Jul-2020
        09:32                   -\r\n</pre><hr></body>\r\n</html>\r\n"
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: head
    uri: https://files.data.gouv.fr/geo-sirene/2020-07/StockEtablissement_utf8_geo.csv.gz
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - files.data.gouv.fr
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 07 Jul 2020 14:43:14 GMT
      Content-Type:
      - application/octet-stream
      Content-Length:
      - '2306474151'
      Last-Modified:
      - Thu, 02 Jul 2020 09:24:28 GMT
      Connection:
      - keep-alive
      Etag:
      - '"5efda7cc-897a00a7"'
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
      Accept-Ranges:
      - bytes
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://files.data.gouv.fr/geo-sirene
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Server:
      - nginx
      Date:
      - Tue, 07 Jul 2020 14:43:18 GMT
      Content-Type:
      - text/html
      Content-Length:
      - '178'
      Location:
      - https://files.data.gouv.fr/geo-sirene/
      Connection:
      - keep-alive
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
    body:
      encoding: UTF-8
      string: "<html>\r\n<head><title>301 Moved Permanently</title></head>\r\n<body
        bgcolor=\"white\">\r\n<center><h1>301 Moved Permanently</h1></center>\r\n<hr><center>nginx</center>\r\n</body>\r\n</html>\r\n"
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
- request:
    method: get
    uri: https://files.data.gouv.fr/geo-sirene/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Tue, 07 Jul 2020 14:43:22 GMT
      Content-Type:
      - text/html
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Xss-Protection:
      - 1; mode=block
    body:
      encoding: ASCII-8BIT
      string: "<html>\r\n<head><title>Index of /geo-sirene/</title></head>\r\n<body
        bgcolor=\"white\">\r\n<h1>Index of /geo-sirene/</h1><hr><pre><a href=\"../\">../</a>\r\n<a
        href=\"2020-07/\">2020-07/</a>                                           02-Jul-2020
        09:24                   -\r\n<a href=\"last/\">last/</a>                                              02-Jul-2020
        09:32                   -\r\n</pre><hr></body>\r\n</html>\r\n"
  recorded_at: Wed, 10 Jun 2020 22:00:00 GMT
recorded_with: VCR 6.0.0
